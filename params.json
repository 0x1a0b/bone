{"name":"Bone","tagline":"Lightning Fast HTTP Multiplexer","body":"bone [![GoDoc](https://godoc.org/github.com/squiidz/bone?status.png)](http://godoc.org/github.com/go-zoo/bone) [![Build Status](https://travis-ci.org/go-zoo/bone.svg)](https://travis-ci.org/go-zoo/bone) [![Codeship Status for squiidz/bone](https://codeship.com/projects/172dae70-802a-0132-9038-321707412590/status?branch=master)](https://codeship.com/projects/57454)\r\n=======\r\n\r\n## What is bone ?\r\n\r\nBone is a lightweight and lightning fast HTTP Multiplexer for Golang. It support :\r\n\r\n- URL Parameters\r\n- REGEX Parameters\r\n- Wildcard routes\r\n- Sub Router, `mux.SubRoute()`, support most standard router (bone, gorilla/mux, httpRouter etc...)\r\n- Http method declaration\r\n- Support for `http.Handler` and `http.HandlerFunc`\r\n- Custom NotFound handler\r\n- Respect the Go standard `http.Handler` interface\r\n\r\n![alt tag](https://c2.staticflickr.com/2/1070/540747396_5542b42cca_z.jpg)\r\n\r\n## Speed\r\n\r\n```\r\n- BenchmarkBoneMux        10000000               118 ns/op\r\n- BenchmarkZeusMux          100000               144 ns/op\r\n- BenchmarkHttpRouterMux  10000000               134 ns/op\r\n- BenchmarkNetHttpMux      3000000               580 ns/op\r\n- BenchmarkGorillaMux       300000              3333 ns/op\r\n- BenchmarkGorillaPatMux   1000000              1889 ns/op\r\n```\r\n\r\n These test are just for fun, all these router are great and really efficient.\r\n Bone do not pretend to be the fastest router for every job.\r\n\r\n## Example\r\n\r\n``` go\r\n\r\npackage main\r\n\r\nimport(\r\n  \"net/http\"\r\n\r\n  \"github.com/go-zoo/bone\"\r\n)\r\n\r\nfunc main () {\r\n  mux := bone.New()\r\n\r\n  // mux.Get, Post, etc ... takes http.Handler\r\n  mux.Get(\"/home/:id\", http.HandlerFunc(HomeHandler))\r\n  mux.Get(\"/profil/:id/:var\", http.HandlerFunc(ProfilHandler))\r\n  mux.Post(\"/data\", http.HandlerFunc(DataHandler))\r\n\r\n  // Support REGEX Route params\r\n  mux.Get(\"/index/#id^[0-9]$\", http.HandleFunc(IndexHandler))\r\n\r\n  // Handle take http.Handler\r\n  mux.Handle(\"/\", http.HandlerFunc(RootHandler))\r\n\r\n  // GetFunc, PostFunc etc ... takes http.HandlerFunc\r\n  mux.GetFunc(\"/test\", Handler)\r\n\r\n  http.ListenAndServe(\":8080\", mux)\r\n}\r\n\r\nfunc Handler(rw http.ResponseWriter, req *http.Request) {\r\n  // Get the value of the \"id\" parameters.\r\n  val := bone.GetValue(req, \"id\")\r\n\r\n  rw.Write([]byte(val))\r\n}\r\n\r\n```\r\n## Changelog\r\n\r\n#### Update 25 September 2015\r\n\r\n- Add support for Sub router\r\n\r\nExample :\r\n``` go\r\nfunc main() {\r\n    mux := bone.New()\r\n    sub := mux.NewRouter()\r\n\r\n    sub.GetFunc(\"/test/example\", func(rw http.ResponseWriter, req *http.Request) {\r\n        rw.Write([]byte(\"From sub router !\"))\r\n    })\r\n\r\n    mux.SubRoute(\"/api\", sub)\r\n\r\n    http.ListenAndServe(\":8080\", mux)\r\n}\r\n\r\n```\r\n\r\n\r\n#### Update 26 April 2015\r\n\r\n- Add Support for REGEX parameters, using ` # ` instead of ` : `.\r\n- Add Mux method ` mux.GetFunc(), mux.PostFunc(), etc ... `, takes ` http.HandlerFunc ` instead of ` http.Handler `.\r\n\r\nExample :\r\n``` go\r\nfunc main() {\r\n    mux.GetFunc(\"/route/#var^[a-z]$\", handler)\r\n}\r\n\r\nfunc handler(rw http.ResponseWriter, req *http.Request) {\r\n    bone.GetValue(req, \"var\")\r\n}\r\n```\r\n\r\n#### Update 29 january 2015\r\n\r\n- Speed improvement for url PARAMeters, from ```~ 1500 ns/op ``` to ```~ 1000 ns/op ```.\r\n\r\n#### Update 25 december 2014\r\n\r\nAfter trying to find a way of using the default url.Query() for route Parameters, i decide to change the way bone is dealing with this. url.Query() is too slow for good router performance.\r\nSo now to get the Parameters value in your handler, you need to use\r\n` bone.GetValue(req, key) ` instead of ` req.Url.Query().Get(key) `.\r\nThis change give a big speed improvement for every kind of application using route Parameters, like ~80x faster ...\r\nReally sorry for breaking things, but i think it's worth it.  \r\n\r\n## TODO\r\n\r\n- DOC\r\n- More Testing\r\n- Debugging\r\n- Optimisation\r\n\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (git checkout -b my-new-feature)\r\n3. Write Tests!\r\n4. Commit your changes (git commit -am 'Add some feature')\r\n5. Push to the branch (git push origin my-new-feature)\r\n6. Create new Pull Request\r\n\r\n## License\r\nMIT\r\n\r\n## Links\r\n\r\nMiddleware Chaining module : [Claw](https://github.com/go-zoo/claw)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}